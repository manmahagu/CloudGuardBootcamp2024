AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC with public and private subnets, a NAT Gateway, and an EC2 instance with an installation script for Docker container.

Parameters:
  EC2KeyName:
    Description: The name of the EC2 key pair to access the instance.
    Type: String
    Default: wafkey
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Must be a valid EC2 key pair name.

  EC2ImageId:
    Description: The ID of the EC2 AMI to use for the instance.
    Type: String
    Default: ami-0e86e20dae9224db8 # Example Ubuntu 20.04 LTS AMI ID N-Virginia
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Must be a valid EC2 AMI ID.

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyWAFVPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # WAF Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: WAFPublicSubnet1

  # NAT Gateway Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: NATGWPublicSubnet2

  # WAF Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: WAFPrivateSubnet1

  # Docker Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: DockerPrivateSubnet2

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route to IGW
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate Route Table with Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt EIPForNAT.AllocationId

  # EIP for NAT Gateway
  EIPForNAT:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Route for Private Subnets to NAT Gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Route Table with Private Subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associate Route Table with Private Subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EC2 Instance in Private Subnet 2
  PrivateInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow all traffic to the EC2 instance
      SecurityGroupIngress:
        - IpProtocol: "-1" # All Traffic
          CidrIp: 0.0.0.0/0

  # EC2 Instance in Private Subnet 2
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2ImageId
      KeyName: !Ref EC2KeyName
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref PrivateInstanceSG
      Tags:
        - Key: Name
          Value: DockerEC2Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          wget https://raw.githubusercontent.com/cadgo/vim/master/autoinstall.sh
          chmod +x autoinstall.sh
          ./autoinstall.sh -u ubuntu -d -n
          docker pull bkimminich/juice-shop
          docker run -d --rm -p 3000:3000 bkimminich/juice-shop
          docker run -d --rm -p 8000:8000 appsecco/dsvw
# EC2 Instance for Flask API in Private Subnet 2
  FlaskAPIInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2ImageId
      KeyName: !Ref EC2KeyName
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref PrivateInstanceSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update and install Docker
          apt-get update
          apt-get install -y docker.io
          # Start Docker service
          systemctl start docker
          systemctl enable docker
          # Pull and run the Docker container for the Flask API on port 9000
          docker run -d -p 9000:9000 <your-docker-image>
      Tags:
        - Key: Name
          Value: FlaskAPIInstance
